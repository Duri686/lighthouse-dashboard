name: Lighthouse CI
on:
  push:
    branches:
      - main
      - staging
      - release/*
    paths-ignore:
      - 'reports/**'  # 忽略报告目录的更改，防止循环触发
  schedule:
    - cron: '0 1,13 * * *'  # 北京时间9点和21点
  workflow_dispatch:

permissions:
  contents: write
  pages: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        site:
          - url: "https://www.fadada.com"
            name: "fadada"
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install -g @lhci/cli@0.12.x
          npm install fs-extra
          echo "node_modules/" > .gitignore
          echo ".lighthouseci/" >> .gitignore

      - name: Set date and branch env
        id: set_env
        run: |
          echo "REPORT_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create reports directory
        run: mkdir -p reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}

      # Run both desktop and mobile tests using Lighthouse CI
      - name: Create Lighthouse directories
        run: |
          # 确保输出目录存在
          mkdir -p .lighthouseci/desktop
          mkdir -p .lighthouseci/mobile
          ls -la .lighthouseci/

      - name: Run Lighthouse CI
        run: |
          echo "===== [STEP: LIGHTHOUSE CI] 开始运行Lighthouse CI测试 ====="
          
          # Create LHCI configuration file
          echo "[CONFIG] 创建Lighthouse配置文件"
          cat > lighthouserc.json << EOF
          {
            "ci": {
              "collect": {
                "settings": {
                  "maxWaitForLoad": 30000,
                  "skipAudits": []
                },
                "numberOfRuns": 1
              }
            }
          }
          EOF
          echo "[CONFIG] Lighthouse配置文件已创建: $(cat lighthouserc.json | tr -d '\n')"
          
          # Desktop
          echo "===== [DESKTOP] 开始运行桌面端测试 ====="
          lhci collect \
            --url=${{ matrix.site.url }} \
            --settings.formFactor=desktop \
            --settings.screenEmulation.mobile=false \
            --settings.screenEmulation.width=1350 \
            --settings.screenEmulation.height=940 \
            --settings.screenEmulation.deviceScaleFactor=1 \
            --settings.chromeFlags="--no-sandbox --headless=new --disable-gpu" \
            --settings.output=json,html \
            --outputDir=.lighthouseci/desktop/
          echo "[DESKTOP] 桌面端测试完成"
          
          # 检查是否生成了文件
          echo "[FILES] 检查桌面端测试后生成的文件 (.lighthouseci/desktop):"
          find .lighthouseci/desktop -type f | sort
          echo "[FILES] 当前.lighthouseci/desktop目录结构:"
          ls -la .lighthouseci/desktop/
          
          # Mobile
          echo "===== [MOBILE] 开始运行移动端测试 ====="
          lhci collect \
            --url=${{ matrix.site.url }} \
            --settings.formFactor=mobile \
            --settings.screenEmulation.mobile=true \
            --settings.screenEmulation.width=360 \
            --settings.screenEmulation.height=640 \
            --settings.screenEmulation.deviceScaleFactor=2 \
            --settings.chromeFlags="--no-sandbox --headless=new --disable-gpu" \
            --settings.output=json,html \
            --outputDir=.lighthouseci/mobile/
          echo "[MOBILE] 移动端测试完成"
          
          # 检查移动端生成的文件
          echo "[FILES] 检查移动端测试后生成的文件 (.lighthouseci/mobile):"
          find .lighthouseci/mobile -type f | sort
          echo "[FILES] 当前.lighthouseci/mobile目录结构:"
          ls -la .lighthouseci/mobile/
          
          # 检查是否生成了文件
          echo "===== [FILES] 所有测试完成后的文件列表 ====="
          find .lighthouseci -type f | sort
          
          # Reports are now directly output to .lighthouseci/desktop and .lighthouseci/mobile
          # The [ORGANIZE] step is no longer needed.
          echo "===== [ORGANIZE] Reports directly output to device-specific directories. No organization step needed. ====="
          echo "[RESULT] 桌面端目录文件列表(.lighthouseci/desktop):"
          ls -la .lighthouseci/desktop/
          echo "[RESULT] 移动端目录文件列表(.lighthouseci/mobile):"
          ls -la .lighthouseci/mobile/

      - name: Copy reports to reports directory
        run: |
          echo "===== [COPY] 开始复制报告文件到目标目录 ====="
          # Copy desktop reports
          echo "[COPY] 查找桌面端报告文件"
          echo "[COPY DEBUG] Listing files in .lighthouseci/desktop/ before find:"
          ls -la .lighthouseci/desktop/
          DESKTOP_JSON=$(find .lighthouseci/desktop/ -type f -name "*.json" | sort -r | head -n 1)
          DESKTOP_HTML=$(find .lighthouseci/desktop/ -type f -name "*.html" | sort -r | head -n 1)
          
          echo "[COPY] 桌面端 JSON文件路径 (来自find): '$DESKTOP_JSON'"
          echo "[COPY] 桌面端 HTML文件路径 (来自find): '$DESKTOP_HTML'"
          
          # Create target directory if it doesn't exist
          TARGET_DIR="reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}"
          echo "[COPY] 目标目录: $TARGET_DIR"
          mkdir -p "$TARGET_DIR"
          
          # Only copy if files exist
          if [ -n "$DESKTOP_JSON" ] && [ -f "$DESKTOP_JSON" ]; then
            TARGET_JSON_PATH="$TARGET_DIR/lhr-${{ matrix.site.name }}-desktop.report.json"
            echo "[COPY DEBUG] Verifying source desktop JSON file: $DESKTOP_JSON"
            ls -la "$DESKTOP_JSON"
            echo "[COPY] 复制桌面端 JSON文件: $DESKTOP_JSON -> $TARGET_JSON_PATH"
            cp "$DESKTOP_JSON" "$TARGET_JSON_PATH"
            echo "[COPY DEBUG] Verifying destination desktop JSON file: $TARGET_JSON_PATH"
            ls -la "$TARGET_JSON_PATH"
            echo "[COPY] 成功复制桌面端 JSON报告"
          else
            echo "[WARNING] 桌面端 JSON文件 '$DESKTOP_JSON' 未找到或为空."
          fi
          
          if [ -n "$DESKTOP_HTML" ] && [ -f "$DESKTOP_HTML" ]; then
            TARGET_HTML_PATH="$TARGET_DIR/lhr-${{ matrix.site.name }}-desktop.report.html"
            echo "[COPY DEBUG] Verifying source desktop HTML file: $DESKTOP_HTML"
            ls -la "$DESKTOP_HTML"
            echo "[COPY] 复制桌面端 HTML文件: $DESKTOP_HTML -> $TARGET_HTML_PATH"
            cp "$DESKTOP_HTML" "$TARGET_HTML_PATH"
            echo "[COPY DEBUG] Verifying destination desktop HTML file: $TARGET_HTML_PATH"
            ls -la "$TARGET_HTML_PATH"
            echo "[COPY] 成功复制桌面端 HTML报告"
          else
            echo "[WARNING] 桌面端 HTML文件 '$DESKTOP_HTML' 未找到或为空."
          fi
          
          # Copy mobile reports
          echo "[COPY] 查找移动端报告文件"
          echo "[COPY DEBUG] Listing files in .lighthouseci/mobile/ before find:"
          ls -la .lighthouseci/mobile/
          MOBILE_JSON=$(find .lighthouseci/mobile/ -type f -name "*.json" | sort -r | head -n 1)
          MOBILE_HTML=$(find .lighthouseci/mobile/ -type f -name "*.html" | sort -r | head -n 1)
          
          echo "[COPY] 移动端 JSON文件路径 (来自find): '$MOBILE_JSON'"
          echo "[COPY] 移动端 HTML文件路径 (来自find): '$MOBILE_HTML'"
          
          # Only copy if files exist
          if [ -n "$MOBILE_JSON" ] && [ -f "$MOBILE_JSON" ]; then
            TARGET_JSON_PATH="$TARGET_DIR/lhr-${{ matrix.site.name }}-mobile.report.json"
            echo "[COPY DEBUG] Verifying source mobile JSON file: $MOBILE_JSON"
            ls -la "$MOBILE_JSON"
            echo "[COPY] 复制移动端 JSON文件: $MOBILE_JSON -> $TARGET_JSON_PATH"
            cp "$MOBILE_JSON" "$TARGET_JSON_PATH"
            echo "[COPY DEBUG] Verifying destination mobile JSON file: $TARGET_JSON_PATH"
            ls -la "$TARGET_JSON_PATH"
            echo "[COPY] 成功复制移动端 JSON报告"
          else
            echo "[WARNING] 移动端 JSON文件 '$MOBILE_JSON' 未找到或为空."
          fi
          
          if [ -n "$MOBILE_HTML" ] && [ -f "$MOBILE_HTML" ]; then
            TARGET_HTML_PATH="$TARGET_DIR/lhr-${{ matrix.site.name }}-mobile.report.html"
            echo "[COPY DEBUG] Verifying source mobile HTML file: $MOBILE_HTML"
            ls -la "$MOBILE_HTML"
            echo "[COPY] 复制移动端 HTML文件: $MOBILE_HTML -> $TARGET_HTML_PATH"
            cp "$MOBILE_HTML" "$TARGET_HTML_PATH"
            echo "[COPY DEBUG] Verifying destination mobile HTML file: $TARGET_HTML_PATH"
            ls -la "$TARGET_HTML_PATH"
            echo "[COPY] 成功复制移动端 HTML报告"
          else
            echo "[WARNING] 移动端 HTML文件 '$MOBILE_HTML' 未找到或为空."
          fi
          
          # List the created report files
          echo "===== [COPY] 目标目录文件列表 ====="
          echo "[COPY] reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/目录内容:"
          ls -la "reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/"

      - name: Process reports (optimized format)
        run: |
          echo "===== [PROCESS] 开始处理报告数据 ====="
          # 检查目标报告文件是否存在
          echo "[PROCESS] 检查报告文件路径"
          # Use different variable names for paths used in processing to avoid conflicts with copy step variables
          DESKTOP_JSON_PROCESS_PATH="reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-desktop.report.json"
          MOBILE_JSON_PROCESS_PATH="reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-mobile.report.json"
          
          echo "[PROCESS] 预期桌面端报告路径 (for processing): $DESKTOP_JSON_PROCESS_PATH"
          echo "[PROCESS DEBUG] 检查桌面端报告文件是否存在: $DESKTOP_JSON_PROCESS_PATH"
          if [ -f "$DESKTOP_JSON_PROCESS_PATH" ]; then
            echo "[PROCESS DEBUG] 桌面端报告文件存在。"
            ls -la "$DESKTOP_JSON_PROCESS_PATH"
          else
            echo "[PROCESS WARNING] 桌面端报告文件不存在于预期路径: $DESKTOP_JSON_PROCESS_PATH"
          fi

          echo "[PROCESS] 预期移动端报告路径 (for processing): $MOBILE_JSON_PROCESS_PATH"
          echo "[PROCESS DEBUG] 检查移动端报告文件是否存在: $MOBILE_JSON_PROCESS_PATH"
          if [ -f "$MOBILE_JSON_PROCESS_PATH" ]; then
            echo "[PROCESS DEBUG] 移动端报告文件存在。"
            ls -la "$MOBILE_JSON_PROCESS_PATH"
          else
            echo "[PROCESS WARNING] 移动端报告文件不存在于预期路径: $MOBILE_JSON_PROCESS_PATH"
          fi
          
          # 确保历史文件目录存在
          echo "[PROCESS] 创建历史数据目录"
          mkdir -p "reports"
          
          # 使用项目中已存在的process-report.js处理报告
          # 处理桌面端报告
          HISTORY_FILE="reports/$BRANCH_NAME-history.json"
          echo "[PROCESS] 历史数据文件: $HISTORY_FILE"
          
          if [ -f "$DESKTOP_JSON_PROCESS_PATH" ]; then
            echo "[PROCESS] 处理桌面端报告: $DESKTOP_JSON_PROCESS_PATH"
            echo "[PROCESS] 执行: node process-report.js '$DESKTOP_JSON_PROCESS_PATH' '$HISTORY_FILE' '${{ matrix.site.url }}' '$REPORT_DATE' 'desktop'"
            node process-report.js "$DESKTOP_JSON_PROCESS_PATH" "$HISTORY_FILE" "${{ matrix.site.url }}" "$REPORT_DATE" "desktop"
            echo "[PROCESS] 桌面端报告处理完成"
          else
            echo "[PROCESS WARNING] 桌面端报告文件未找到，跳过处理: $DESKTOP_JSON_PROCESS_PATH"
          fi
          
          # 处理移动端报告
          if [ -f "$MOBILE_JSON_PROCESS_PATH" ]; then
            echo "[PROCESS] 处理移动端报告: $MOBILE_JSON_PROCESS_PATH"
            echo "[PROCESS] 执行: node process-report.js '$MOBILE_JSON_PROCESS_PATH' '$HISTORY_FILE' '${{ matrix.site.url }}' '$REPORT_DATE' 'mobile'"
            node process-report.js "$MOBILE_JSON_PROCESS_PATH" "$HISTORY_FILE" "${{ matrix.site.url }}" "$REPORT_DATE" "mobile"
            echo "[PROCESS] 移动端报告处理完成"
          else
            echo "[PROCESS WARNING] 移动端报告文件未找到，跳过处理: $MOBILE_JSON_PROCESS_PATH"
          fi
          
          # 检查历史数据文件
          if [ -f "$HISTORY_FILE" ]; then
            echo "[PROCESS] 历史数据文件已生成/更新: $HISTORY_FILE"
            echo "[PROCESS] 历史文件大小: $(ls -lh "$HISTORY_FILE" | awk '{print $5}')"
            echo "[PROCESS] 历史数据条目数: $(cat "$HISTORY_FILE" | grep -o '"date"' | wc -l)"
          else
            echo "[WARNING] 历史数据文件未生成: $HISTORY_FILE"
          fi
          
          # 创建网站列表已加速加载
          echo "===== [SITES] 更新网站列表 ====="
          SITE_LIST_FILE="reports/$BRANCH_NAME-sites.json"
          echo "[SITES] 网站列表文件: $SITE_LIST_FILE"
          
          if [ ! -f "$SITE_LIST_FILE" ]; then
            echo "[SITES] 创建新的网站列表文件"
            echo '{"sites":[]}' > "$SITE_LIST_FILE"
          else
            echo "[SITES] 网站列表文件已存在"
          fi
          
          # 使用jq将网站信息插入site列表
          # 先检查jq是否已经安装
          echo "[SITES] 检查jq工具"
          if ! command -v jq &> /dev/null; then
            echo "[SITES] jq未安装，正在安装..."
            sudo apt-get update && sudo apt-get install -y jq
          else
            echo "[SITES] jq已安装，版本: $(jq --version)"
          fi
          
          # 提取当前网站并检查是否已存在
          SITE_URL="${{ matrix.site.url }}"
          SITE_NAME="${{ matrix.site.name }}"
          echo "[SITES] 当前网站: URL=$SITE_URL, 名称=$SITE_NAME"
          
          # 如果网站不存在于列表中，则添加它
          echo "[SITES] 检查网站是否已存在于列表中"
          if ! jq -e ".sites[] | select(.url == \"$SITE_URL\")" "$SITE_LIST_FILE" > /dev/null; then
            echo "[SITES] 网站不存在于列表中，添加中..."
            jq ".sites += [{\"url\": \"$SITE_URL\", \"name\": \"$SITE_NAME\"}]" "$SITE_LIST_FILE" > temp.json && mv temp.json "$SITE_LIST_FILE"
            echo "[SITES] 成功添加网站 $SITE_URL 到列表"
          else
            echo "[SITES] 网站 $SITE_URL 已存在于列表中"
          fi
          
          echo "[SITES] 当前网站列表内容:"
          cat "$SITE_LIST_FILE"

      - name: List Reports Directory
        run: |
          echo "===== [SUMMARY] 工作流程执行结果汇总 ====="
          
          echo "[SUMMARY] 报告目录结构:"
          find reports -type f -name "*.json" | sort
          
          echo "[SUMMARY] 原始报告文件数量: $(find reports -name "*.report.json" | wc -l)"
          echo "[SUMMARY] 历史数据文件大小:"
          find reports -name "*-history.json" -exec ls -lh {} \;
          
          echo "[SUMMARY] 当前分支网站列表:"
          if [ -f "reports/$BRANCH_NAME-sites.json" ]; then
            jq . "reports/$BRANCH_NAME-sites.json"
            echo "[SUMMARY] 网站总数: $(jq '.sites | length' "reports/$BRANCH_NAME-sites.json")"
          else
            echo "[WARNING] 未找到网站列表文件"
          fi
          
          echo "===== [DONE] 工作流程执行完成 ====="

      - name: Commit and push changes
        run: |
          echo "===== [GIT] 提交和推送报告到仓库 ====="
          echo "[GIT] 配置Git用户信息"
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 首先获取最新更改
          echo "[GIT] 获取最新仓库更改"
          git fetch origin
          
          # 处理未暂存文件，先将所有更改暂存再拉取
          echo "[GIT] 暂存本地更改以避免冲突"
          git stash -u || true
          
          # 拉取最新代码
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          echo "[GIT] 当前分支: $CURRENT_BRANCH"
          echo "[GIT] 拉取最新代码"
          git pull origin $CURRENT_BRANCH --ff-only || git pull origin $CURRENT_BRANCH
          
          # 如果有暂存的更改，恢复他们
          echo "[GIT] 恢复暂存的更改"
          git stash pop || true
          
          # 添加所有报告文件和历史记录
          echo "[GIT] 添加更新的文件到暂存区"
          git add reports/
          git add .gitignore
          git add lighthouserc.json
          
          # 检查是否有更改需要提交
          echo "[GIT] 检查是否有更改需要提交"
          if git diff --cached --quiet; then
            echo "[GIT] 没有检测到需要提交的更改"
            exit 0
          else
            COMMIT_MSG="Update Lighthouse reports $REPORT_DATE ($BRANCH_NAME ${{ matrix.site.name }})"
            echo "[GIT] 提交更改: $COMMIT_MSG"
            git commit -m "$COMMIT_MSG"
            
            echo "[GIT] 推送更改到远程仓库: origin/$CURRENT_BRANCH"
            git push origin HEAD:$CURRENT_BRANCH
            echo "[GIT] 成功推送报告更新到仓库"
          fi
          
          echo "===== [GIT] 提交和推送完成 ====="
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}