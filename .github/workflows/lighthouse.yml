name: Lighthouse CI
on:
  push:
    branches:
      - main
      - staging
      - release/*
    paths-ignore:
      - 'reports/**'  # 忽略报告目录的更改，防止循环触发
  schedule:
    - cron: '0 1,13 * * *'  # 北京时间9点和21点
  workflow_dispatch:

permissions:
  contents: write
  pages: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        site:
          - url: "https://www.fadada.com"
            name: "fadada"
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install dependencies
        run: |
          npm init -y
          npm install -g @lhci/cli@0.12.x
          npm install fs-extra
          echo "node_modules/" > .gitignore
          echo ".lighthouseci/" >> .gitignore

      - name: Set date and branch env
        id: set_env
        run: |
          echo "REPORT_DATE=$(date +'%Y%m%d')" >> $GITHUB_ENV
          echo "BRANCH_NAME=${GITHUB_REF##*/}" >> $GITHUB_ENV

      - name: Create reports directory
        run: mkdir -p reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}

      # Run both desktop and mobile tests using Lighthouse CI
      - name: Run Lighthouse CI
        run: |
          # Create LHCI configuration file
          cat > lighthouserc.json << EOF
          {
            "ci": {
              "collect": {
                "settings": {
                  "maxWaitForLoad": 30000,
                  "skipAudits": []
                },
                "numberOfRuns": 1
              }
            }
          }
          EOF
          
          # Desktop
          echo "Running desktop tests..."
          lhci collect \
            --url=${{ matrix.site.url }} \
            --settings.formFactor=desktop \
            --settings.screenEmulation.mobile=false \
            --settings.screenEmulation.width=1350 \
            --settings.screenEmulation.height=940 \
            --settings.screenEmulation.deviceScaleFactor=1 \
            --settings.chromeFlags="--no-sandbox --headless=new --disable-gpu" \
            --settings.output=json,html \
            --outDir=.lighthouseci/desktop
          
          # Mobile
          echo "Running mobile tests..."
          lhci collect \
            --url=${{ matrix.site.url }} \
            --settings.formFactor=mobile \
            --settings.screenEmulation.mobile=true \
            --settings.screenEmulation.width=360 \
            --settings.screenEmulation.height=640 \
            --settings.screenEmulation.deviceScaleFactor=2 \
            --settings.chromeFlags="--no-sandbox --headless=new --disable-gpu" \
            --settings.output=json,html \
            --outDir=.lighthouseci/mobile

      - name: Copy reports to reports directory
        run: |
          # Copy desktop reports
          DESKTOP_JSON=$(find .lighthouseci/desktop -name "*.json" | sort -r | head -n 1)
          DESKTOP_HTML=$(find .lighthouseci/desktop -name "*.html" | sort -r | head -n 1)
          cp "$DESKTOP_JSON" "reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-desktop.report.json"
          cp "$DESKTOP_HTML" "reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-desktop.report.html"
          
          # Copy mobile reports
          MOBILE_JSON=$(find .lighthouseci/mobile -name "*.json" | sort -r | head -n 1)
          MOBILE_HTML=$(find .lighthouseci/mobile -name "*.html" | sort -r | head -n 1)
          cp "$MOBILE_JSON" "reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-mobile.report.json"
          cp "$MOBILE_HTML" "reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-mobile.report.html"

      - name: Process reports (optimized format)
        run: |
          # 处理桌面端报告
          DESKTOP_JSON="reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-desktop.report.json"
          echo "Processing desktop report: $DESKTOP_JSON"
          node process-report.js "$DESKTOP_JSON" "reports/$BRANCH_NAME-history.json" "${{ matrix.site.url }}" "$REPORT_DATE" "desktop"
          
          # 处理移动端报告
          MOBILE_JSON="reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/lhr-${{ matrix.site.name }}-mobile.report.json"
          echo "Processing mobile report: $MOBILE_JSON"
          node process-report.js "$MOBILE_JSON" "reports/$BRANCH_NAME-history.json" "${{ matrix.site.url }}" "$REPORT_DATE" "mobile"
          
          # 创建网站列表已加速加载
          echo "Creating site list for quick loading"
          SITE_LIST_FILE="reports/$BRANCH_NAME-sites.json"
          if [ ! -f "$SITE_LIST_FILE" ]; then
            echo '{"sites":[]}' > "$SITE_LIST_FILE"
          fi
          
          # 使用jq将网站信息插入site列表
          apt-get update && apt-get install -y jq
          
          # 提取当前网站并检查是否已存在
          SITE_URL="${{ matrix.site.url }}"
          SITE_NAME="${{ matrix.site.name }}"
          
          # 如果网站不存在于列表中，则添加它
          if ! jq -e ".sites[] | select(.url == \"$SITE_URL\")" "$SITE_LIST_FILE" > /dev/null; then
            jq ".sites += [{\"url\": \"$SITE_URL\", \"name\": \"$SITE_NAME\"}]" "$SITE_LIST_FILE" > temp.json && mv temp.json "$SITE_LIST_FILE"
            echo "Added site $SITE_URL to site list"
          else
            echo "Site $SITE_URL already in site list"
          fi

      - name: List Reports Directory
        run: |
          echo "Contents of reports directory:"
          ls -la ./reports/
          echo "Contents of the latest report directory:"
          ls -la ./reports/$REPORT_DATE/$BRANCH_NAME/${{ matrix.site.name }}/

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          # 首先获取最新更改
          echo "Fetching latest changes..."
          git fetch origin
          
          # 处理未暂存文件，先将所有更改暂存再拉取
          echo "Stashing any changes before pull..."
          git stash -u || true
          
          # 拉取最新代码
          CURRENT_BRANCH=${GITHUB_REF#refs/heads/}
          git pull origin $CURRENT_BRANCH --ff-only || git pull origin $CURRENT_BRANCH
          
          # 如果有暂存的更改，恢复他们
          git stash pop || true
          
          # 添加所有报告文件和历史记录
          git add reports/
          git add .gitignore
          git add lighthouserc.json
          
          # 检查是否有更改需要提交
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Update Lighthouse reports $REPORT_DATE ($BRANCH_NAME ${{ matrix.site.name }})"
            git push origin HEAD:$CURRENT_BRANCH
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}