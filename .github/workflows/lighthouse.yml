name: Lighthouse CI
on:
  push:
    branches:
      - main
      - master
    paths-ignore:
      - 'reports/**'  # 忽略报告目录的更改，防止循环触发
  schedule:
    - cron: '0 */6 * * *'
  workflow_dispatch:

# 添加权限配置
permissions:
  contents: write
  pages: write

jobs:
  lighthouse:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'  # 更新到 Node.js 18

      - name: Install Chrome
        run: |
          sudo apt-get update
          sudo apt-get install -y wget gnupg2
          wget -q https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb
          sudo apt-get install -y ./google-chrome-stable_current_amd64.deb
          google-chrome --version

      - name: Install dependencies
        run: |
          npm init -y
          npm install -g @lhci/cli@0.12.x
          # Add package.json to git tracking
          git add package.json
          echo "node_modules/" > .gitignore
          echo ".lighthouseci/" >> .gitignore
          echo "*.deb" >> .gitignore

      - name: Run Lighthouse and Process Reports
        run: |
          set -ex  # Exit on error and print commands
          
          mkdir -p reports
          NOW=$(date -u +"%Y-%m-%dT%H:%M:%S")
          DATE=$(date -u +"%Y-%m-%d")
          
          # Create directories
          mkdir -p .lighthouseci/{desktop,mobile}
          
          run_lighthouse() {
            local device=$1
            local formFactor=$2
            local width=$3
            local height=$4
            local mobile=$5
            local scale=$6

            echo "Running $device test..."
            
            # Clear previous results
            rm -rf ".lighthouseci/$device"
            mkdir -p ".lighthouseci/$device"
            
            # Run Lighthouse
            lhci collect \
              --url https://www.fadada.com \
              --settings.formFactor=$formFactor \
              --settings.screenEmulation.mobile=$mobile \
              --settings.screenEmulation.width=$width \
              --settings.screenEmulation.height=$height \
              --settings.screenEmulation.deviceScaleFactor=$scale \
              --settings.chromeFlags="--no-sandbox --headless=new --disable-gpu" \
              --settings.maxWaitForLoad=30000 \
              --output=json \
              --outDir=".lighthouseci/$device" \
              --numberOfRuns=1

            # Debug output
            echo "Lighthouse run completed. Checking for output..."
            echo "Contents of .lighthouseci directory:"
            ls -la .lighthouseci/
            echo "Contents of .lighthouseci/$device:"
            ls -la ".lighthouseci/$device" || true
            
            # Find the generated report
            local json_file=$(find ".lighthouseci" -name "lhr-*.json" -type f | sort -r | head -n 1)
            
            if [ ! -f "$json_file" ]; then
              echo "Error: No JSON report found"
              return 1
            fi
            
            # Move the report to the correct location
            local target_file=".lighthouseci/$device/$(basename $json_file)"
            if [ "$json_file" != "$target_file" ]; then
              mkdir -p ".lighthouseci/$device"
              mv "$json_file" "$target_file"
            fi
            
            echo "Report generated successfully at: $target_file"
            echo "File contents preview:"
            head -n 20 "$target_file"
            return 0
          }

          # Run tests
          run_lighthouse "desktop" "desktop" 1350 940 "false" 1
          run_lighthouse "mobile" "mobile" 360 640 "true" 2

          # Process reports function with improved error handling
          process_report() {
            local device=$1
            local json_file=$(find ".lighthouseci/$device" -name "lhr-*.json" -type f | sort -r | head -n 1)
            
            echo "Looking for report in .lighthouseci/$device"
            ls -la ".lighthouseci/$device"
            
            if [ ! -f "$json_file" ]; then
              echo "{\"error\": \"No report found for $device\", \"scores\":{}, \"metrics\":{}}"
              return 0
            fi

            if [ ! -s "$json_file" ]; then
              echo "{\"error\": \"Empty report file for $device\", \"scores\":{}, \"metrics\":{}}"
              return 0
            fi

            # Process the report
            local result=$(DEVICE_TYPE=$device DATE=$DATE node process-report.js "$json_file")
            if [ $? -ne 0 ]; then
              echo "{\"error\": \"Processing failed for $device\", \"scores\":{}, \"metrics\":{}}"
              return 0
            fi

            echo "$result"
          }

          # Initialize history.json with empty array if it doesn't exist
          [ -f reports/history.json ] || echo '{"reports":[]}' > reports/history.json

          # Process reports and handle JSON properly
          echo "Processing desktop report..."
          DESKTOP_DATA=$(process_report "desktop" | tail -n 1)
          echo "Desktop data: $DESKTOP_DATA"
          
          echo "Processing mobile report..."
          MOBILE_DATA=$(process_report "mobile" | tail -n 1)
          echo "Mobile data: $MOBILE_DATA"

          # Validate JSON and update history.json
          echo "Updating history.json..."
          if [ ! -f "reports/history.json" ]; then
            echo '{"reports":[]}' > reports/history.json
          fi

          # Create temporary file with proper path
          jq --arg date "$NOW" \
             --arg url "https://www.fadada.com" \
             --argjson desktop "$DESKTOP_DATA" \
             --argjson mobile "$MOBILE_DATA" \
             '.reports += [{
                "date": $date,
                "url": $url,
                "desktop": $desktop,
                "mobile": $mobile
              }]' \
             reports/history.json > "reports/history.json.tmp"

          if [ -f "reports/history.json.tmp" ]; then
            mv "reports.history.json.tmp" "reports/history.json"
          else
            echo "Error: Failed to create history.json.tmp"
            exit 1
          fi

          # Verify the update
          echo "Updated history.json contents:"
          cat reports/history.json

      - name: List Reports Directory
        run: |
          echo "Contents of reports directory:"
          ls -la ./reports/

      - name: Cleanup and Prepare
        run: |
          rm -f google-chrome-stable_current_amd64.deb
          rm -rf .lighthouseci

      - name: Commit and push changes
        run: |
          git config --global user.name 'github-actions[bot]'
          git config --global user.email 'github-actions[bot]@users.noreply.github.com'
          
          echo "=== Git Status Before Add ==="
          git status
          
          # 使用find命令添加文件
          echo "Adding report files..."
          find reports -type f -name "data-https___www_fadada_com_*.json" -exec git add {} \; || true
          find reports -type f -name "data-https___www_fadada_com_*.html" -exec git add {} \; || true
          
          # 添加history.json如果存在
          if [ -f "reports/history.json" ]; then
            git add reports/history.json
          fi
          
          git add .gitignore || true
          
          echo "=== Files staged for commit ==="
          git status --short
          
          # 检查是否有文件要提交
          if git diff --cached --quiet; then
            echo "No changes to commit"
            exit 0
          else
            git commit -m "Update Lighthouse reports $(date -u)"
            git push origin "HEAD:$GITHUB_REF" || git push origin "HEAD:${GITHUB_REF#refs/heads/}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}